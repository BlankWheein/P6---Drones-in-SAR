{
  "name": "com.unity.purchasing",
  "displayName": "In App Purchasing",
  "unity": "2020.3",
  "_upm": {
    "gameService": {
      "groupIndex": 4,
      "groupName": "Monetize",
      "configurePath": "Project/Services/In-App Purchasing",
      "genericDashboardUrl": "https://dashboard.unity3d.com/",
      "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
      "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
    },
    "supportedPlatforms": [
      "Android",
      "iOS"
    ],
    "changelog": "### Added\n- Added a new restore transaction callback `RestoreTransactions(Action<bool, string> callback)` to obtain the error string when RestoreTransactions is not successful (`IAppleExtensions` and `IGooglePlayStoreExtensions`).\n- Added a new initialize failed callback `IStoreListener.OnInitializeFailed(InitializationFailureReason, string)` to obtain the error string when OnInitializeFailed is invoked.\n- Added a new setup failed callback `IStoreCallback.OnSetupFailed(InitializationFailureReason, string)` to obtain the error string when OnSetupFailed is invoked.\n- Added a new FetchAdditionalProducts. The failCallback contains an error string. `IStoreController.FetchAdditionalProducts(HashSet<ProductDefinition>, Action, Action<InitializationFailureReason, string>)`\n- Apple - `Product.appleOriginalTransactionId` : Returns the original transaction ID. This field is only available when the purchase was made in the active session.\n- Apple - `Product.appleProductIsRestored` : Indicates whether the product has been restored.\n- GooglePlay - `IGooglePlayConfiguration.SetFetchPurchasesExcludeDeferred(bool exclude)` has been added to revert to the previous behaviour. This is not recommended and should only be used if `Deferred` purchases are handled in your `IStoreListener.ProcessPurchase`.\n- GooglePlay - `IGooglePlayStoreExtensions.GetPurchaseState(Product product)` has been added to obtain the `GooglePurchaseState` of a product.\n- GooglePlay - Added missing values to `GoogleBillingResponseCode` in order to output it in `PurchaseFailureDescription`'s message when available.\n- Codeless - Added to the [IAP Button](https://docs.unity3d.com/Packages/com.unity.purchasing@4.6/manual/IAPButton.html) the option to add a script for the On Transactions Restored: `void OnTransactionsRestored(bool success, string? error)`\n\n### Changed\n- Upgraded `com.unity.services.core` from 1.3.1 to 1.5.2\n- Upgraded `com.unity.services.analytics` from 4.0.1 to 4.2.0\n- The old OnInitializeFailed `OnInitializeFailed(InitializationFailureReason error)` was marked `Obsolete`\n- The old OnSetupFailed `OnSetupFailed(InitializationFailureReason reason)` was marked `Obsolete`\n- The old FetchAdditionalProducts `FetchAdditionalProducts(HashSet<ProductDefinition> additionalProducts, Action successCallback, Action<InitializationFailureReason> failCallback)` was marked `Obsolete`\n- The old restore transaction callback `RestoreTransactions(Action<bool> callback)` was marked `Obsolete` (`IAppleExtensions` and `IGooglePlayStoreExtensions`).\n- Apple - Transactions received from Apple that are invalid (where the product is not entitled) will no longer output the `Finishing transaction` log. This only affects transactions that never reached the `ProcessPurchase`.\n- GooglePlay - The enum `GooglePurchaseState` now recognizes `4` as `Deferred`.\n\n### Fixed\n- Analytics - A ServicesInitializationException introduced in Analytics 4.3.0 is now handled properly.\n- Analytics - Fixed an issue where transactions events were invalidated when there was no localization data for a product.\n- GooglePlay - Fixed a `NullReferenceException` when querying sku details while the BillingClient is not ready.\n- GooglePlay - Fixed [Application Not Responding (ANR)](https://developer.android.com/topic/performance/vitals/anr) when foregrounding the application while disconnected from the Google Play Store.\n- GooglePlay - Limited the occurence of `PurchasingUnavailable` errors when retrieving products while in a disconnected state to once per connection.\n- GooglePlay - `Deferred` purchases are, by default, no longer sent to `IStoreListener.ProcessPurchase` when fetching purchases. This avoids the possibility of granting products that were not paid for. These purchases will only be processed once they become `Purchased`. This can be reverted with `IGooglePlayConfiguration.SetFetchPurchasesExcludeDeferred(bool exclude)` to not exclude them, but `Deferred` purchases will need to be handled in `IStoreListener.ProcessPurchase`."
  },
  "version": "4.6.0",
  "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
  "dependencies": {
    "com.unity.ugui": "1.0.0",
    "com.unity.modules.unityanalytics": "1.0.0",
    "com.unity.modules.unitywebrequest": "1.0.0",
    "com.unity.modules.jsonserialize": "1.0.0",
    "com.unity.modules.androidjni": "1.0.0",
    "com.unity.services.core": "1.5.2",
    "com.unity.services.analytics": "4.2.0"
  },
  "keywords": [
    "purchasing",
    "iap",
    "unity"
  ],
  "license": "Unity Companion Package License v1.0",
  "hideInEditor": false,
  "relatedPackages": {
    "com.unity.purchasing.tests": "4.6.0"
  },
  "upmCi": {
    "footprint": "ef0834f685faf8a4eee2aee17bdf896d10990621"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.6/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
    "type": "git",
    "revision": "42927a3b866999421b2df26e836f720feb67a743"
  },
  "samples": [
    {
      "displayName": "01 Buying Consumables",
      "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
      "path": "Samples~/01 BuyingConsumables"
    },
    {
      "displayName": "02 Buying Subscription",
      "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
      "path": "Samples~/02 BuyingSubscription"
    },
    {
      "displayName": "03 Fetching Additional Products",
      "description": "This sample showcases how to fetch additional products using the Store Controller.",
      "path": "Samples~/03 FetchingAdditionalProducts"
    },
    {
      "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
      "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
      "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
    },
    {
      "displayName": "05 Local Receipt Validation",
      "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
      "path": "Samples~/05 LocalReceiptValidation"
    },
    {
      "displayName": "06 Initialize Unity Gaming Services",
      "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
      "path": "Samples~/06 InitializeGamingServices"
    },
    {
      "displayName": "Apple App Store - 01 Refreshing App Receipts",
      "description": "This sample shows how to refresh Apple App Store receipts.",
      "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
    },
    {
      "displayName": "Apple App Store - 02 Restoring Transactions",
      "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
      "path": "Samples~/Apple App Store - 02 RestoringTransactions"
    },
    {
      "displayName": "Apple App Store - 03 Handling Deferred Purchases",
      "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
      "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
    },
    {
      "displayName": "Apple App Store - 04 Retrieving Product Receipt",
      "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
      "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
    },
    {
      "displayName": "Apple App Store - 05 Fraud Detection",
      "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
      "path": "Samples~/Apple App Store - 05 FraudDetection"
    },
    {
      "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
      "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
      "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
    },
    {
      "displayName": "Apple App Store - 07 Getting Product Details",
      "description": "This sample showcases how to use Apple extensions to get additional product details.",
      "path": "Samples~/Apple App Store - 07 gettingProductDetails"
    },
    {
      "displayName": "Apple App Store - 08 Promoting Products",
      "description": "This sample shows how to Promote Products in the Apple App Store.",
      "path": "Samples~/Apple App Store - 08 PromptingProducts"
    },
    {
      "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
      "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
      "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
    },
    {
      "displayName": "Apple App Store - 10 Can Make Payments",
      "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
      "path": "Samples~/Apple App Store - 10 CanMakePayments"
    },
    {
      "displayName": "Apple App Store - 11 Family Sharing",
      "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
      "path": "Samples~/Apple App Store - 11 FamilySharing"
    },
    {
      "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
      "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
      "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
    },
    {
      "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
      "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
      "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
    },
    {
      "displayName": "Google Play Store - 02 Restoring Transactions",
      "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
      "path": "Samples~/Google Play Store - 02 RestoringTransactions"
    },
    {
      "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
      "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
      "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
    },
    {
      "displayName": "Google Play Store - 04 Handling Deferred Purchases",
      "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
      "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
    },
    {
      "displayName": "Google Play Store - 05 Fraud Detection",
      "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
      "path": "Samples~/Google Play Store - 05 FraudDetection"
    }
  ]
}
